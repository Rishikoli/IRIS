version: '3.8'

services:
  # Backend API Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: iris-backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+psycopg://iris:iris@postgres:5432/irisdb
      - GEMINI_API_KEY=${GEMINI_API_KEY:-demo_key}
      - FMP_API_KEY=${FMP_API_KEY:-demo_key}
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:80
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDICES=tips,advisors,documents,assessments
    volumes:
      - ./backend/data:/app/data
      - ./backend/uploads:/app/uploads
    networks:
      - iris-network
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: iris-frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - iris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Redis for caching (optional for demo)
  redis:
    image: redis:7-alpine
    container_name: iris-redis
    ports:
      - "6379:6379"
    networks:
      - iris-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: iris-postgres
    environment:
      - POSTGRES_DB=irisdb
      - POSTGRES_USER=iris
      - POSTGRES_PASSWORD=iris
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - iris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iris -d irisdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch (single-node, dev only)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: iris-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - iris-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (dev only)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: iris-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - iris-network
    restart: unless-stopped

networks:
  iris-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  es-data:
    driver: local
